{"ast":null,"code":"var _jsxFileName = \"/Users/apple/auctiondapp/src/AuctionPage/ExploreAuctions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExploreAuctions({\n  contract\n}) {\n  _s();\n  const [auctions, setAuctions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchAuctions = async () => {\n      try {\n        // Call the smart contract's function to get the list of auctions\n        const auctionsCount = await contract.auctionsCount();\n\n        // Prepare an array to store the fetched auctions\n        const fetchedAuctions = [];\n\n        // Loop through each auction and fetch its details\n        for (let i = 0; i < auctionsCount; i++) {\n          const auction = await contract.auctions(i);\n\n          // Assuming 'auctions' is a struct with relevant information\n          const auctionDetails = {\n            id: i,\n            title: auction.title,\n            startingBid: auction.startingBid\n            // Add other relevant properties from the 'auction' object\n          };\n\n          fetchedAuctions.push(auctionDetails);\n        }\n\n        // Update the 'auctions' state with the fetched auctions\n        setAuctions(fetchedAuctions);\n        setLoading(false);\n      } catch (error) {\n        // Handle error\n        console.error('Error fetching auctions:', error);\n        setLoading(false);\n      }\n    };\n    fetchAuctions();\n  }, [contract]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Auctions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: auctions.map(auction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: auction.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Starting Bid: \", auction.startingBid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, auction.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(ExploreAuctions, \"zOOfPrpNBs8E7e6AU+w61AQeOiU=\");\n_c = ExploreAuctions;\nexport default ExploreAuctions;\nvar _c;\n$RefreshReg$(_c, \"ExploreAuctions\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ExploreAuctions","contract","_s","auctions","setAuctions","loading","setLoading","fetchAuctions","auctionsCount","fetchedAuctions","i","auction","auctionDetails","id","title","startingBid","push","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/apple/auctiondapp/src/AuctionPage/ExploreAuctions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction ExploreAuctions({ contract }) {\n  const [auctions, setAuctions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchAuctions = async () => {\n      try {\n        // Call the smart contract's function to get the list of auctions\n        const auctionsCount = await contract.auctionsCount();\n\n        // Prepare an array to store the fetched auctions\n        const fetchedAuctions = [];\n\n        // Loop through each auction and fetch its details\n        for (let i = 0; i < auctionsCount; i++) {\n          const auction = await contract.auctions(i);\n\n          // Assuming 'auctions' is a struct with relevant information\n          const auctionDetails = {\n            id: i,\n            title: auction.title,\n            startingBid: auction.startingBid,\n            // Add other relevant properties from the 'auction' object\n          };\n\n          fetchedAuctions.push(auctionDetails);\n        }\n\n        // Update the 'auctions' state with the fetched auctions\n        setAuctions(fetchedAuctions);\n        setLoading(false);\n      } catch (error) {\n        // Handle error\n        console.error('Error fetching auctions:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchAuctions();\n  }, [contract]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>List of Auctions</h2>\n      <ul>\n        {auctions.map((auction) => (\n          <li key={auction.id}>\n            <h3>{auction.title}</h3>\n            <p>Starting Bid: {auction.startingBid}</p>\n            {/* Add other auction details as needed */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ExploreAuctions;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,aAAa,GAAG,MAAMP,QAAQ,CAACO,aAAa,CAAC,CAAC;;QAEpD;QACA,MAAMC,eAAe,GAAG,EAAE;;QAE1B;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,EAAEE,CAAC,EAAE,EAAE;UACtC,MAAMC,OAAO,GAAG,MAAMV,QAAQ,CAACE,QAAQ,CAACO,CAAC,CAAC;;UAE1C;UACA,MAAME,cAAc,GAAG;YACrBC,EAAE,EAAEH,CAAC;YACLI,KAAK,EAAEH,OAAO,CAACG,KAAK;YACpBC,WAAW,EAAEJ,OAAO,CAACI;YACrB;UACF,CAAC;;UAEDN,eAAe,CAACO,IAAI,CAACJ,cAAc,CAAC;QACtC;;QAEA;QACAR,WAAW,CAACK,eAAe,CAAC;QAC5BH,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,IAAII,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAoB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACExB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBxB,OAAA;MAAAoB,QAAA,EACGhB,QAAQ,CAACqB,GAAG,CAAEb,OAAO,iBACpBZ,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UAAAoB,QAAA,EAAKR,OAAO,CAACG;QAAK;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBxB,OAAA;UAAAoB,QAAA,GAAG,gBAAc,EAACR,OAAO,CAACI,WAAW;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFnCZ,OAAO,CAACE,EAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CA3DQF,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AA6DxB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}