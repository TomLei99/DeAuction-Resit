{"ast":null,"code":"var _jsxFileName = \"/Users/apple/auctiondapp/src/AuctionPage/Auction.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from \"react\";\nimport { Web3 } from 'web3';\nimport { ethers } from 'ethers';\nimport EnglishAuction from '../artifacts/contracts/Auction.sol/EnglishAuction.json';\nimport CreateAuction from './CreateAuction';\nimport ExploreAuctions from './ExploreAuctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAbi = [EnglishAuction];\nconst contractAddress = \"0x437cb27e2407a5f90920ba661d5ed7d8d58c6d38\";\nconst App = () => {\n  _s();\n  // State variables\n  const [contract, setContract] = useState(null);\n  const [highestBid, setHighestBid] = useState(0);\n  const [bidAmount, setBidAmount] = useState(0);\n  const [account, setAccount] = useState(null);\n\n  // useEffect to initialize the contract and get user account\n  useEffect(() => {\n    initContract();\n    getAccount();\n  }, []);\n\n  // Function to initialize the contract\n  const initContract = async () => {\n    try {\n      // Check if MetaMask is installed\n      if (typeof window.ethereum !== \"undefined\") {\n        // Connect to MetaMask\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        // Load the contract\n        const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n        setContract(contract);\n\n        // Get the current highest bid\n        const currentBid = await contract.highestBid();\n        setHighestBid(currentBid);\n      } else {\n        console.log(\"MetaMask not detected.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing contract:\", error);\n    }\n  };\n\n  // Function to get the user's account\n  const getAccount = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const accounts = await provider.listAccounts();\n        setAccount(accounts[0]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching account:\", error);\n    }\n  };\n\n  // Function to place a bid\n  const placeBid = async () => {\n    try {\n      if (contract && bidAmount > highestBid && account) {\n        const transaction = await contract.bid({\n          value: ethers.utils.parseEther(bidAmount.toString())\n        });\n        await transaction.wait(); // Wait for the transaction to be mined\n        const currentBid = await contract.highestBid();\n        setHighestBid(currentBid);\n        setBidAmount(0); // Clear the bid input field\n      }\n    } catch (error) {\n      console.error(\"Error placing bid:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"English Auction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Highest Bid: \", ethers.utils.formatEther(highestBid), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter Bid Amount (ETH)\",\n      value: bidAmount,\n      onChange: e => setBidAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: placeBid,\n      children: \"Place Bid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"You can create auction here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(CreateAuction, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExploreAuctions, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0eEyE8+Jp8S3G6ZOTREzfUiFr7g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","ethers","EnglishAuction","CreateAuction","ExploreAuctions","jsxDEV","_jsxDEV","contractAbi","contractAddress","App","_s","contract","setContract","highestBid","setHighestBid","bidAmount","setBidAmount","account","setAccount","initContract","getAccount","window","ethereum","provider","providers","Web3Provider","signer","getSigner","Contract","currentBid","console","log","error","accounts","listAccounts","placeBid","transaction","bid","value","utils","parseEther","toString","wait","children","fileName","_jsxFileName","lineNumber","columnNumber","formatEther","type","placeholder","onChange","e","target","onClick","className","_c","$RefreshReg$"],"sources":["/Users/apple/auctiondapp/src/AuctionPage/Auction.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from \"react\";\nimport {Web3} from 'web3';\nimport { ethers } from 'ethers';\nimport EnglishAuction from '../artifacts/contracts/Auction.sol/EnglishAuction.json';\nimport CreateAuction from './CreateAuction';\nimport ExploreAuctions from './ExploreAuctions';\n\n\n\nconst contractAbi = [\n  EnglishAuction\n];\nconst contractAddress = \"0x437cb27e2407a5f90920ba661d5ed7d8d58c6d38\";\n\nconst App = () => {\n  // State variables\n  const [contract, setContract] = useState(null);\n  const [highestBid, setHighestBid] = useState(0);\n  const [bidAmount, setBidAmount] = useState(0);\n  const [account, setAccount] = useState(null);\n\n  // useEffect to initialize the contract and get user account\n  useEffect(() => {\n    initContract();\n    getAccount();\n  }, []);\n\n  // Function to initialize the contract\n  const initContract = async () => {\n    try {\n      // Check if MetaMask is installed\n      if (typeof window.ethereum !== \"undefined\") {\n        // Connect to MetaMask\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        // Load the contract\n        const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n        setContract(contract);\n\n        // Get the current highest bid\n        const currentBid = await contract.highestBid();\n        setHighestBid(currentBid);\n      } else {\n        console.log(\"MetaMask not detected.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing contract:\", error);\n    }\n  };\n\n  // Function to get the user's account\n  const getAccount = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const accounts = await provider.listAccounts();\n        setAccount(accounts[0]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching account:\", error);\n    }\n  };\n\n  // Function to place a bid\n  const placeBid = async () => {\n    try {\n      if (contract && bidAmount > highestBid && account) {\n        const transaction = await contract.bid({\n          value: ethers.utils.parseEther(bidAmount.toString()),\n        });\n        await transaction.wait(); // Wait for the transaction to be mined\n        const currentBid = await contract.highestBid();\n        setHighestBid(currentBid);\n        setBidAmount(0); // Clear the bid input field\n      }\n    } catch (error) {\n      console.error(\"Error placing bid:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>English Auction</h1>\n      <p>Highest Bid: {ethers.utils.formatEther(highestBid)} ETH</p>\n      <input\n        type=\"number\"\n        placeholder=\"Enter Bid Amount (ETH)\"\n        value={bidAmount}\n        onChange={(e) => setBidAmount(e.target.value)}\n      />\n      <button onClick={placeBid}>Place Bid</button>\n      <h1>You can create auction here</h1>\n      <div className=\"App\">\n        <CreateAuction contract={contract} />\n        <ExploreAuctions contract={contract} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}